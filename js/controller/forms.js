// Generated by CoffeeScript 1.4.0
(function() {

  jQuery(function($) {
    $.fn.showForm = function() {
      $('#forms > .side-block').hide();
      return this.show();
    };
    $.fn.setFormData = function(data) {
      var inp, name, value;
      this.clearForm();
      for (name in data) {
        value = data[name];
        inp = this.find('*[name=' + name + ']');
        if (inp.attr('type') === 'radio') {
          inp.filter(function() {
            return this.value === value;
          }).prop('checked', true).trigger('change');
        } else {
          inp.val(value);
        }
      }
      this.trigger('setFormData', [data]);
      return this;
    };
    $.fn.getFormData = function() {
      var data;
      data = {};
      this.find(':input').each(function() {
        var name;
        if (this.type === 'radio' && this.checked === false) {
          return null;
        }
        if (this.name.length > 0 && this.value.length > 0) {
          if (this.name.indexOf('[]') > 0) {
            name = this.name.replace('[]', '');
            if (name in data) {
              return data[name].push(this.value);
            } else {
              return data[name] = [this.value];
            }
          } else {
            return data[this.name] = this.value;
          }
        }
      });
      return data;
    };
    $.fn.setFormModel = function(model) {
      var form;
      form = this.find('form');
      form = form.length ? form : this;
      form.data('model', model);
      return this;
    };
    $.fn.getFormModel = function() {
      var form;
      form = this.find('form');
      form = form.length ? form : this;
      return form.data('model');
    };
    $.fn.clearForm = function() {
      this.find('input:text, textarea, select').val('');
      this.find('input[type=radio]:first').prop('checked', true).trigger('change');
      this.setFormModel(null);
      return this.trigger('clearForm');
    };
    window.addWidget = function(className, data) {
      var view, widget;
      if (!(className in widgetMap)) {
        return null;
      }
      widget = new widgetMap[className].model(data);
      view = new widgetMap[className].view(widget);
      widget.$node = view.getHtml();
      widget.$node.data('model', widget);
      $('#add-widget').before(widget.$node);
      return widget;
    };
    $('#forms form').submit(function() {
      var $this, className, data;
      $this = $(this);
      className = $this.closest('.side-block').attr('id').replace('-form', '');
      if (!(className in widgetMap)) {
        return null;
      }
      data = $this.getFormData();
      if ($this.getFormModel()) {
        $this.getFormModel().set(data);
      } else {
        addWidget(className, data);
      }
      $this.clearForm();
      return false;
    });
    $('#forms .delete-data').click(function() {
      var widget;
      widget = $(this).closest('.side-block').getFormModel();
      if (widget) {
        widget.$node.remove();
      }
      showTypeForm();
      return false;
    });
    $('.side-block li').has(':radio').click(function() {
      return $(this).find(':radio').prop('checked', true).trigger('change');
    });
    return $('#forms form').has('.chars').find('textarea').keyup(function() {
      var inp;
      inp = $(this).closest('form').find('.chars span');
      inp.html(inp.data('max') - this.value.length);
      inp.parent().toggleClass('red', inp.data('max') - this.value.length === 0);
      return null;
    });
  });

}).call(this);
