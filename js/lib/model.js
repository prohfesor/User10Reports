// Generated by CoffeeScript 1.4.0
(function() {
  var clone, extendClass, isArray, up,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  if (typeof Array.prototype.indexOf === 'undefined') {
    Array.prototype.indexOf = function(item) {
      var i, l;
      i = 0;
      l = this.length;
      while (i < l) {
        if (i in this && this[i] === item) {
          return i;
        }
        i++;
      }
      return -1;
    };
  }

  window.Model = (function() {

    Model.prototype.data = {};

    Model.prototype.dataClass = {};

    Model.prototype.validate = {};

    Model.prototype.bind = {};

    Model.class_constructor = function(proto) {
      var field, val, _fn, _ref;
      proto._isArray = {};
      _ref = proto.data;
      _fn = function(field) {
        var fieldName;
        fieldName = up(field);
        if (!('set' + fieldName in proto)) {
          proto['set' + fieldName] = function(value) {
            return this.set(field, value);
          };
        }
        if (!('get' + fieldName in proto)) {
          proto['get' + fieldName] = function() {
            return this.get(field);
          };
        }
        proto._isArray[field] = isArray(val);
        if (proto._isArray[field]) {
          if (!('add' + fieldName in proto)) {
            proto['add' + fieldName] = function(item) {
              return this.add(field, item);
            };
          }
          if (!('del' + fieldName in proto)) {
            proto['del' + fieldName] = function(item) {
              return this.del(field, item);
            };
          }
          if (!('del' + fieldName + 'ByIndex' in proto)) {
            return proto['del' + fieldName + 'ByIndex'] = function(index) {
              return this.del_by_index(field, index);
            };
          }
        }
      };
      for (field in _ref) {
        val = _ref[field];
        _fn(field);
      }
      return null;
    };

    function Model(data) {
      var field, model, proto, value, _ref, _ref1;
      if (data == null) {
        data = {};
      }
      model = this;
      this._data = {};
      this._handlers = {};
      proto = model.constructor.prototype;
      if ('_isArray' in proto === false) {
        Model.class_constructor(proto);
      }
      _ref = model.data;
      for (field in _ref) {
        value = _ref[field];
        model._data[field] = model._isArray[field] ? [] : null;
      }
      model.on(model.bind);
      _ref1 = model.data;
      for (field in _ref1) {
        value = _ref1[field];
        model.set(field, field in data ? data[field] : clone(value));
      }
      model.trigger('new');
    }

    Model.prototype.trigger = function() {
      var event, field, handler, item, match, rest, _i, _j, _len, _len1, _ref, _ref1;
      event = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (event in this._handlers) {
        _ref = this._handlers[event];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          handler = _ref[_i];
          handler.apply(this, rest);
        }
        return this;
      }
      match = event.match(/^@(\w+)\.(.*)$/);
      if (match && match[1] in this.data) {
        field = match[1];
        if (this._isArray[field]) {
          _ref1 = this._data[field];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            item = _ref1[_j];
            item.trigger(match[2]);
          }
        } else {
          field.trigger(match[2]);
        }
      }
      return this;
    };

    Model.prototype.on = function(events, handler) {
      var event, field, func, i, item, match, model, name, _i, _len, _ref;
      if (typeof events === 'object') {
        for (name in events) {
          func = events[name];
          this.on(name, func);
        }
        return this;
      }
      if (events === '') {
        handler.call(this);
        return this;
      }
      model = this;
      events = events.split(/\s*,\s*/g);
      i = 0;
      while (i < events.length) {
        event = events[i++];
        if (match = event.match(/^([@\w]+)\.(.*)$/)) {
          (function(others) {
            return model.on(match[1], function(item) {
              return item.on(others, function() {
                var args;
                args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return handler.apply(model, [item].concat(args));
              });
            });
          })(match[2]);
        } else if (match = event.match(/^@(\w+)$/)) {
          field = match[1];
          if (model._isArray[field]) {
            _ref = model._data[field];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              handler.call(model, item);
            }
            events.push('add' + up(field), 'del' + up(field));
          } else {
            handler.call(model, model._data[field]);
            events.push('set' + up(field));
          }
        } else {
          if (!(event in this._handlers)) {
            this._handlers[event] = [];
          }
          this._handlers[event].push(handler);
        }
      }
      return this;
    };

    Model.prototype.get = function(field) {
      if (field) {
        return this._data[field];
      } else {
        return this._data;
      }
    };

    Model.prototype.set = function(field, value) {
      var dataClass, item, name, val, valid, _i, _len;
      if (typeof field === 'object') {
        for (name in field) {
          val = field[name];
          this.set(name, val);
        }
        return this;
      }
      if (!(field in this.data)) {
        return this;
      }
      if (this._isArray[field]) {
        while (this._data[field].length > 0) {
          this.del_by_index(field, 0);
        }
        for (_i = 0, _len = value.length; _i < _len; _i++) {
          item = value[_i];
          this.add(field, item);
        }
        this.trigger('set' + up(field), this._data[field]);
        this.trigger('set', field, this._data[field]);
        return this;
      }
      if (this._data[field] === value) {
        return this;
      }
      if (field in this.dataClass && !(value instanceof this.dataClass[field])) {
        dataClass = this.dataClass[field].prototype.constructor.name === '' ? this.dataClass[field].call(this, value) : this.dataClass[field];
        value = new dataClass(value);
      }
      if (field in this.validate) {
        valid = this.validate[field].call(this, value);
        this.trigger('validate-' + field, valid, value);
        if (valid !== true) {
          return this;
        }
      }
      this._data[field] = value;
      this.trigger('set' + up(field), value);
      return this.trigger('set', field, value);
    };

    Model.prototype.add = function(field, item) {
      var dataClass, valid;
      if (field in this.dataClass && !(item instanceof Model)) {
        dataClass = '__super__' in this.dataClass[field] ? this.dataClass[field] : this.dataClass[field].call(this, item);
        item = new dataClass(item);
      }
      if (field in this.validate) {
        valid = this.validate[field].call(this, item);
        this.trigger('validate-' + field, valid, item);
        if (valid !== true) {
          return this;
        }
      }
      this._data[field].push(item);
      this.trigger('add' + up(field), item);
      return this.trigger('add', field, item);
    };

    Model.prototype.del = function(field, item) {
      return this.del_by_index(field, this._data[field].indexOf(item));
    };

    Model.prototype.del_by_index = function(field, index) {
      var item;
      item = this._data[field][index];
      this.trigger('beforeDel' + up(field), item, index);
      this._data[field].splice(index, 1);
      this.trigger('del' + up(field), item, index);
      return this.trigger('del', field, item, index);
    };

    Model.prototype.toObject = function(depth) {
      var data, field, item, value, _i, _len, _ref, _ref1;
      if (depth == null) {
        depth = -1;
      }
      data = {};
      if (depth === 0) {
        _ref = this.get();
        for (field in _ref) {
          value = _ref[field];
          data[field] = value;
        }
        return data;
      }
      _ref1 = this.get();
      for (field in _ref1) {
        value = _ref1[field];
        if (this._isArray[field] && value.length && value[0] instanceof Model) {
          data[field] = [];
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            item = value[_i];
            data[field].push(item.toObject(depth - 1));
          }
        } else if (value instanceof Model) {
          data[field] = value.toObject(depth - 1);
        } else {
          data[field] = value;
        }
      }
      return data;
    };

    return Model;

  })();

  Model.extend = function(ops) {
    return (function(parent) {
      var key, newClass, val;
      newClass = function() {
        return newClass.__super__.constructor.apply(this, arguments);
      };
      extendClass(newClass, parent);
      for (key in ops) {
        val = ops[key];
        newClass.prototype[key] = val;
      }
      return newClass;
    })(this);
  };

  Model.util = {};

  Model.util._upCache = {};

  Model.util.up = up = function(s) {
    if (!(s in Model.util._upCache)) {
      Model.util._upCache[s] = s.replace(/^\w/, function(c) {
        return c.toUpperCase();
      }).replace(/_(\w)/g, function(x, c) {
        return c.toUpperCase();
      });
    }
    return Model.util._upCache[s];
  };

  Model.util.isArray = isArray = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  Model.util.clone = clone = function(obj) {
    var key, res, val, _i, _len;
    if (obj === null || typeof obj !== 'object') {
      return obj;
    }
    if (isArray(obj)) {
      res = [];
      for (_i = 0, _len = obj.length; _i < _len; _i++) {
        val = obj[_i];
        res.push(clone(val));
      }
    } else {
      res = {};
      for (key in obj) {
        val = obj[key];
        res[key] = clone(val);
      }
    }
    return res;
  };

  Model.util.extendClass = extendClass = function(child, parent) {
    var key, val;
    for (key in parent) {
      if (!__hasProp.call(parent, key)) continue;
      val = parent[key];
      child[key] = val;
    }
    function ctor() { this.constructor = child; };

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  };

}).call(this);
