// Generated by CoffeeScript 1.4.0
(function() {
  var clone, extendClass, isArray, isObject, up,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  if (typeof Array.prototype.indexOf === 'undefined') {
    Array.prototype.indexOf = function(item) {
      var i, l;
      i = 0;
      l = this.length;
      while (i < l) {
        if (i in this && this[i] === item) {
          return i;
        }
        i++;
      }
      return -1;
    };
  }

  if (typeof Function.prototype.bind === 'undefined') {
    Function.prototype.bind = function(scope) {
      var _this = this;
      return function() {
        return _this.apply(scope, arguments);
      };
    };
  }

  window.Model = (function() {

    Model.prototype.data = {};

    Model.prototype.dataClass = {};

    Model.prototype.validate = {};

    Model.prototype.bind = {};

    function Model(data) {
      var dataClass, field, item, model, val, _fn, _i, _len, _ref, _ref1;
      model = this;
      this._data = {};
      this._handlers = {};
      _ref = model.data;
      for (field in _ref) {
        val = _ref[field];
        if (field in model.dataClass) {
          dataClass = model.dataClass[field];
          if (isArray(val)) {
            model._data[field] = [];
            for (_i = 0, _len = val.length; _i < _len; _i++) {
              item = val[_i];
              if (item instanceof dataClass) {
                model._data[field].push(item);
              } else {
                model._data[field].push(new dataClass(item));
              }
            }
          } else if (val instanceof dataClass) {
            model._data[field] = val;
          } else {
            model._data[field] = new dataClass(val);
          }
        } else {
          model._data[field] = clone(val);
        }
      }
      _ref1 = model._data;
      _fn = function(field, val) {
        var fieldName;
        fieldName = up(field);
        if (isArray(val)) {
          if (!('add' + fieldName in model)) {
            model['add' + fieldName] = function(item) {
              return model.add_to(field, item);
            };
          }
          if (!('set' + fieldName in model)) {
            model['set' + fieldName] = function(arr) {
              return model.set_to(field, arr);
            };
          }
          if (!('del' + fieldName in model)) {
            model['del' + fieldName] = function(index) {
              return model.del_from(field, index);
            };
          }
        }
        if (!('set' + fieldName in model)) {
          model['set' + fieldName] = function(value) {
            return model.set(field, value);
          };
        }
        if (!('get' + fieldName in model)) {
          return model['get' + fieldName] = function() {
            return model.get(field);
          };
        }
      };
      for (field in _ref1) {
        val = _ref1[field];
        _fn(field, val);
      }
      model.on(model.bind);
      if (data != null) {
        model.set(data);
      }
      model.trigger('new');
    }

    Model.prototype.trigger = function() {
      var event, handler, rest, _i, _len, _ref;
      event = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (event in this._handlers) {
        _ref = this._handlers[event];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          handler = _ref[_i];
          handler.apply(this, rest);
        }
      }
      return this;
    };

    Model.prototype.on = function(events, handler) {
      var event, func, match, model, name, _i, _j, _len, _len1, _ref, _ref1;
      switch (typeof events) {
        case 'object':
          for (name in events) {
            func = events[name];
            this.on(name, func);
          }
          break;
        case 'string':
          model = this;
          _ref = events.split(/\s*,\s*/g);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            event = _ref[_i];
            match = event.match(/^([@\w]+)\.(.*)$/);
            if (match) {
              (function(match) {
                return model.on(match[1], function(item) {
                  return item.on(match[2], function() {
                    return handler.apply(model, [item].concat(Array.prototype.slice.call(arguments, 0)));
                  });
                });
              })(match);
              events = events.replace(event, '');
              if (events === '') {
                return model;
              }
            }
          }
          events = events.replace(/@(\w+)/g, function(x, field) {
            var item, _j, _len1, _ref1;
            if (!(field in model._data)) {
              return x;
            }
            if (isArray(model._data[field])) {
              _ref1 = model._data[field];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                item = _ref1[_j];
                handler.call(model, item);
              }
              return 'add' + up(field);
            } else {
              handler.call(model, model._data[field]);
              return 'set' + up(field);
            }
          });
          events = events.replace(/\((.*?)\)([\w\-]+)/g, function(x, a, b) {
            var s;
            return ((function() {
              var _j, _len1, _ref1, _results;
              _ref1 = a.split('|');
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                s = _ref1[_j];
                _results.push(s + b);
              }
              return _results;
            })()).join(',');
          });
          if (events === '') {
            handler.call(model);
            return model;
          }
          _ref1 = events.split(/\s*,\s*/g);
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            event = _ref1[_j];
            if (event === '') {
              continue;
            }
            if (!(event in this._handlers)) {
              this._handlers[event] = [];
            }
            if (this._handlers[event].indexOf(handler) === -1) {
              this._handlers[event].push(handler);
            }
          }
      }
      return this;
    };

    Model.prototype.get = function(field, def) {
      if (field == null) {
        return this._data;
      } else if (field in this._data) {
        return this._data[field];
      } else {
        return def;
      }
    };

    Model.prototype.set = function(field, value) {
      var dataClass, name, val;
      if (isObject(field)) {
        for (name in field) {
          val = field[name];
          if (name in this._data) {
            this['set' + up(name)](val);
          }
        }
      } else if (field in this._data) {
        if (field in this.dataClass) {
          dataClass = this.dataClass[field];
          if (!(value instanceof Model)) {
            value = new dataClass(value);
          }
        }
        if (field in this.validate) {
          if (this.validate[field].call(this, value) === false) {
            return this.trigger('validate-' + field, false, value);
          } else {
            this.trigger('validate-' + field, true, value);
          }
        }
        this._data[field] = value;
        this.trigger('set' + up(field), value);
        this.trigger('set', field, value);
      }
      return this;
    };

    Model.prototype.add_to = function(field, item) {
      var dataClass, value, _i, _len, _results;
      if (isArray(item)) {
        _results = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          value = item[_i];
          _results.push(this.add_to(field, value));
        }
        return _results;
      } else {
        if (field in this.dataClass) {
          dataClass = this.dataClass[field];
          if (!(item instanceof Model)) {
            item = new dataClass(item);
          }
        }
        this._data[field].push(item);
        return this.trigger('add' + up(field), item);
      }
    };

    Model.prototype.set_to = function(field, arr) {
      var fieldName;
      fieldName = up(field);
      while (this._data[field].length > 0) {
        this['del' + fieldName](0);
      }
      this['add' + fieldName](arr);
      return this.trigger('set' + fieldName, this.get(field));
    };

    Model.prototype.del_from = function(field, index) {
      var item;
      if (typeof index !== 'number') {
        index = this._data[field].indexOf(index);
      }
      if (index > -1) {
        item = this._data[field][index];
        this.trigger('beforeDel' + up(field), item);
        this._data[field].splice(index, 1);
        return this.trigger('del' + up(field), item);
      }
    };

    return Model;

  })();

  Model.extend = function(ops) {
    return (function(parent) {
      var key, newClass, val;
      newClass = function() {
        return newClass.__super__.constructor.apply(this, arguments);
      };
      extendClass(newClass, parent);
      for (key in ops) {
        val = ops[key];
        newClass.prototype[key] = val;
      }
      return newClass;
    })(this);
  };

  Model.util = {};

  Model.util.up = up = function(s) {
    return s.charAt(0).toUpperCase() + s.slice(1).replace(/_(\w)/g, function(x, c) {
      return c.toUpperCase();
    });
  };

  Model.util.isArray = isArray = function(obj) {
    return Object.prototype.toString.call(obj).indexOf('Array') > -1;
  };

  Model.util.isObject = isObject = function(obj) {
    return Object.prototype.toString.call(obj).indexOf('Object') > -1;
  };

  Model.util.clone = clone = function(obj) {
    var key, res, val, _i, _len;
    if (obj === null || typeof obj !== 'object') {
      return obj;
    }
    if (isArray(obj)) {
      res = [];
      for (_i = 0, _len = obj.length; _i < _len; _i++) {
        val = obj[_i];
        res.push(clone(val));
      }
    } else {
      res = {};
      for (key in obj) {
        val = obj[key];
        res[key] = clone(val);
      }
    }
    return res;
  };

  Model.util.extendClass = extendClass = function(child, parent) {
    var key, val;
    for (key in parent) {
      if (!__hasProp.call(parent, key)) continue;
      val = parent[key];
      child[key] = val;
    }
    function ctor() { this.constructor = child; };

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  };

}).call(this);
