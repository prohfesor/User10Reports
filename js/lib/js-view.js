// Generated by CoffeeScript 1.4.0
(function() {
  var checkOps, up,
    __slice = [].slice;

  window.View = (function() {

    View.prototype.html = '';

    View.prototype.htmlSelector = '';

    View.prototype.template = {};

    View.prototype.getView = function(model, data, html, template) {
      var helper, helperOps, node, ops, selector;
      html = $(html);
      for (selector in template) {
        ops = template[selector];
        node = selector === '' ? html : html.find(selector);
        for (helper in ops) {
          helperOps = ops[helper];
          if (helper in this.helpers) {
            this.helpers[helper](helperOps, node, model, data);
          }
        }
      }
      return html;
    };

    function View(model) {
      var html;
      html = this.html || jQuery(this.htmlSelector).html();
      this._html = this.getView(model, model, html, this.template);
    }

    View.prototype.getHtml = function() {
      return this._html;
    };

    View.prototype.helpers = {
      html: function(ops, node, model, data) {
        var event, func, _fn, _ref;
        _ref = checkOps(ops);
        _fn = function(func) {
          return model.on(event, function() {
            var rest;
            rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return node.html(func.apply(data, rest));
          });
        };
        for (event in _ref) {
          func = _ref[event];
          _fn(func);
        }
        return this;
      },
      attr: function(ops, node, model, data) {
        var attrOps, event, func, name, _fn, _ref;
        for (name in ops) {
          attrOps = ops[name];
          _ref = checkOps(attrOps);
          _fn = function(name, func) {
            return model.on(event, function() {
              var rest;
              rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return node.attr(name, func.apply(data, rest));
            });
          };
          for (event in _ref) {
            func = _ref[event];
            _fn(name, func);
          }
        }
        return this;
      },
      prop: function(ops, node, model, data) {
        var event, func, name, propOps, _fn, _ref;
        for (name in ops) {
          propOps = ops[name];
          _ref = checkOps(propOps);
          _fn = function(name, func) {
            return model.on(event, function() {
              var rest;
              rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return node.prop(name, func.apply(data, rest));
            });
          };
          for (event in _ref) {
            func = _ref[event];
            _fn(name, func);
          }
        }
        return this;
      },
      bind: function(ops, node, model, data) {
        var field, prop;
        for (prop in ops) {
          field = ops[prop];
          model.on('set' + up(field), function() {
            var value;
            value = model.get(field);
            if (node.prop(prop) !== value) {
              return node.prop(prop, value);
            }
          });
          node.on('change', function() {
            var value;
            value = node.prop(prop);
            if (model.get(field) !== value) {
              return model.set(field, value);
            }
          });
          node.prop(prop, model.get(field));
        }
        return this;
      },
      cssClass: function(ops, node, model, data) {
        var clssOps, event, func, name, _fn, _ref;
        for (name in ops) {
          clssOps = ops[name];
          _ref = checkOps(clssOps);
          _fn = function(name, func) {
            return model.on(event, function() {
              var rest;
              rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return node.toggleClass(name, func.apply(data, rest));
            });
          };
          for (event in _ref) {
            func = _ref[event];
            _fn(name, func);
          }
        }
        return this;
      },
      on: function(ops, node, model, data) {
        var event, func, _fn;
        _fn = function(func) {
          return node.on(event, function(e) {
            return func.call(data, node, e);
          });
        };
        for (event in ops) {
          func = ops[event];
          _fn(func);
        }
        return this;
      },
      onModel: function(ops, node, model, data) {
        var event, func, _fn;
        _fn = function(func) {
          return model.on(event, function() {
            var rest;
            rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return func.apply(data, [node].concat(rest));
          });
        };
        for (event in ops) {
          func = ops[event];
          _fn(func);
        }
        return this;
      },
      each: function(ops, node, model, data) {
        var arrHtml, arrItem, item, tpl, _i, _len, _ref;
        tpl = node.html();
        node.empty();
        if (typeof ops.dataField === 'string') {
          ops.bind = {
            add: 'add' + up(ops.dataField),
            del: 'del' + up(ops.dataField)
          };
        }
        arrItem = [];
        arrHtml = [];
        model.on(ops.bind.add, function(item) {
          var html, view;
          if (ops.dataView != null) {
            view = new ops.dataView(item);
            html = view.getHtml();
            node.append(html);
          }
          else if (ops.modelViewField != null) {
              var viewClass = model[ops.modelViewField];
              view = new viewClass(item);
              html = view.getHtml();
              node.append(html);
          }
          else {
            html = View.prototype.getView(model, item, tpl, ops.template);
            node.append(html);
          }
          arrItem.push(item);
          return arrHtml.push(html);
        });
        model.on(ops.bind.del, function(item) {
          var i;
          i = arrItem.indexOf(item);
          if (i > -1) {
            arrItem.splice(i, 1);
            arrHtml[i].remove();
            return arrHtml.splice(i, 1);
          }
        });
        if (ops.dataField != null) {
          _ref = model['get' + up(ops.dataField)].call();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            model.trigger(ops.bind.add, item);
          }
        }
        return this;
      },
      "do": function(ops, node, model, data) {
        return ops.call(data, node);
      }
    };

    return View;

  })();

  if (window.Model != null) {
    View.extend = Model.extend;
  }

  checkOps = function(ops) {
    var obj;
    switch (typeof ops) {
      case 'function':
        return {
          '': ops
        };
      case 'string':
        obj = {};
        obj[ops] = function(value) {
          return value;
        };
        return obj;
      default:
        return ops;
    }
  };

  up = Model.util.up;

}).call(this);
